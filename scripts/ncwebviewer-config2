#!/usr/bin/python                                                               
import time
import sys
import argparse
import os
import json
import urllib2
import re

###################################################################


ConfigTemplate={
    "title": None, 
    "url": None, 
    "latlonbox": {"min":{}, "max":{}},
    "tilesurl": "http://{s}.tile.osm.org/{z}/{x}/{y}.png", 
    "heatmapmaxlevel": 25, 
    "div": {
        "info": {
            "opacity": 0.9, 
            "padding": 0, 
            "z-index": 1, 
            "right": "5px", 
            "color": "white", 
            "position": "absolute", 
            "top": "5px", 
            "font": "10pt sans-serif", 
            "height": "1em"
        }
    }
}

SpatialVariableTemplate={
    "float": "left", 
    "height": "100%", 
    "padding": 0, 
    "width": "100%", 
    "z-index": 0, 
    "margin": 0
}
    
TemporalVariableTemplate={
    "opacity": 0.8, 
    "width": "960px", 
    "z-index": 1, 
    "left": "10px", 
    "bottom": "10px", 
    "position": "absolute", 
    "font": "10pt sans-serif", 
    "background-color": "#555", 
    "height": "100px"
}

CategoricalVariableTemplate={
    "opacity": 0.8, 
    "width": "695px", 
    "z-index": 1, 
    "right": "10px", 
    "margin-left": "495px", 
    "position": "absolute", 
    "top": "30px", 
    "font": "10pt sans-serif", 
    "background-color": "#555", 
    "height": "550px"
}

###############################################################################


parser = argparse.ArgumentParser();
parser.add_argument('-s', 
                    "--server", 
                    dest="server", 
                    type=str, 
                    required=True, 
                    help='Nanocube Server URL')
parser.add_argument('-o', 
                    "--output", 
                    dest="output", 
                    type=str,
                    default="",
                    required=False, 
                    help='Output configuration .json file')
args = parser.parse_args()


# { fields:
#    [ { name: 'src',
#        type: 'nc_dim_quadtree_25',
#        valnames: {} },
#     { name: 'crime',
#       type: 'nc_dim_cat_1',
#       valnames:
#        { CRIM_SEXUAL_ASSAULT: 7,
#          WEAPONS_VIOLATION: 30,
#          KIDNAPPING: 13,
#          OFFENSE_INVOLVING_CHILDREN: 20,
#          CONCEALED_CARRY_LICENSE_VIOLATION: 4,
#          SEX_OFFENSE: 27,
#          INTIMIDATION: 12,
#          PROSTITUTION: 23,
#          ARSON: 0,
#          BURGLARY: 3,
#          ROBBERY: 26,
#          CRIMINAL_TRESPASS: 6,
#          THEFT: 29,
#          HOMICIDE: 10,
#          OBSCENITY: 19,
#          OTHER_NARCOTIC_VIOLATION: 21,
#          MOTOR_VEHICLE_THEFT: 15,
#          GAMBLING: 9,
#          NARCOTICS: 16,
#          'NON-CRIMINAL_(SUBJECT_SPECIFIED)': 18,
#          DECEPTIVE_PRACTICE: 8,
#          STALKING: 28,
#          CRIMINAL_DAMAGE: 5,
#          PUBLIC_PEACE_VIOLATION: 25,
#          BATTERY: 2,
#          ASSAULT: 1,
#          PUBLIC_INDECENCY: 24,
#          'NON-CRIMINAL': 17,
#          LIQUOR_LAW_VIOLATION: 14,
#          OTHER_OFFENSE: 22,
#          INTERFERENCE_WITH_PUBLIC_OFFICER: 11 } },
#      { name: 'time',
#        type: 'nc_dim_time_2',
#        valnames: {} },
#      { name: 'count',
#        type: 'nc_var_uint_4',
#        valnames: {} } ],
#   metadata:
#    [ { key: 'tbin',
#        value: '2013-12-01_00:00:00_3600s' },
#      { key: 'src__origin',
#        value: 'degrees_mercator_quadtree25' },
#      { key: 'name', value: 'crime50k.csv' } ] }


class Schema:
    def __init__(self, name):
        self.name = name
        self.fields = []
    def addField(self, field_name, field_type):
        field = Field(field_name, field_type)
        self.fields.append(field)
        return field

class Field:
    def __init__(self, name, field_type):
        self.name = name
        self.type = field_type
    def isSpatial(self):
        return self.type.startswith("nc_dim_quadtree_")
    def isCategorical(self):
        return self.type.startswith("nc_dim_cat_")
    def isTemporal(self):
        return self.type.startswith("nc_dim_time_")
    def spatialResolution(self):
        if self.isSpatial():
            return int(self.type.split('_')[-1])

# load schema
# print args.server
response = urllib2.urlopen(args.server+"/schema")
schema_json = json.loads(response.read())

#
# spatial field
#

name           = None
spatial_field  = None
temporal_field = None

for item in schema_json['metadata']:
    if item['key'] == 'name':
        name = item['value']

    # elif item['value'].startswith('degrees_mercator_quadtree'):
    #     spatial_field_name = item['key'].split('_')[0]
    #     spatial_resolution = int(item['value'][len('degrees_mercator_quadtree'):])
    
schema = Schema(name)

for json_field in schema_json['fields']:
    field = schema.addField(json_field['name'], json_field['type'])
    if field.isSpatial():
        spatial_field = field
    elif field.isTemporal():
        temporal_field = field


# General Config
config= ConfigTemplate;
config['title']= schema.name
config['url'] = args.server
config['heatmapmaxlevel'] = spatial_field.spatialResolution()

for f in schema.fields:
    if f.isCategorical():
        config['div'][f.name] = CategoricalVariableTemplate
    if f.isTemporal():
        config['div'][f.name] = TemporalVariableTemplate
    if f.isSpatial():
        config['latlonbox']['min'][f.name]=[-85.0,-180.0]
        config['latlonbox']['max'][f.name]=[85.0,180.0]
        config['div'][f.name] = SpatialVariableTemplate

ostream = open(args.output,"w") if len(args.output) else sys.stdout
ostream.write(json.dumps(config,indent=2))
ostream.close()
