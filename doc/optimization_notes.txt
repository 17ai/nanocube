- General performance attempts

  - profile-guided optimization

    Profile-guided optimizations turn out to work quite well. First, build the code with
  
    -O3 -DOPTIMIZE_FOR_SPEED -march=native -funroll-loops -fprofile-generate. 

    Then, run the code. Then, build it again, but using

    -O3 -DOPTIMIZE_FOR_SPEED -march=native -funroll-loops -fprofile-use. 

    This gives about an 8% overall improvement over the previous best runtime.

- There's a fairly large runtime associated with the updated_contents
  check during UpdateProcedure. I attempted a few different data
  structures here, and these are my findings:

  THINGS I HAVE TRIED

  - Hash table

    Using the STL hash table seems like a decent choice, but the
    overhead of computing the hashes, rebucketing, etc. do not appear
    to pay off in the long run. This is O(1) for all operations
    besides destruction, which takes O(n).

  - unordered vector

    Asymptotically, this is supposed to be worse than the hash
    table. This has O(1) insertion, O(1) destruction (since clear()
    doesn't deallocate the vector) and O(n) find(). In practice, this
    is the best solution

  - ordered vector

    This has O(n) insertion, O(1) destruction, and O(log n) find (by
    binary search). This is better than the hash table, but worse than
    the unordered vector


  - custom-built generational hash-table

    I implemented the hash-table trick that allows clearing in O(1)
    time. This was the closest to unordered vector in runtime, but
    still not better.


  THINGS I HAVE NOT TRIED

  - std::set

    I haven't attempted this one, but I don't believe it will work
    well because of the pressure it would put on the allocator (having
    tons of nodes of the search tree being constantly allocated and
    deallocated). Using the STL implementation should have O(log n)
    insertion, O(n) destruction, and O(log n) find.

  THINGS I SHOULD TRY

    If we had a specially-crafted balanced tree that used a pool of
    nodes, then maybe std::set would work. std::set with a pool
    allocator?

